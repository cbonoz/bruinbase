+++ BTreeIndex.cc (545 lines)
126 lines of addition "> "
203 lines of deletion "< "
----
17 spots of changes "\dc\d"
6 spots of additions "\da\d"
33 spots of deletions "\dd\d"
----
total 56 diff spots

+++ BTreeNode.cc (511 lines)
37 lines of addition "> "
47 lines of deletion "< "
----
17 spots of changes "\dc\d"
3 spots of additions "\da\d"
2 spots of deletions "\dd\d"
----
total 22 diff spots

=======Detailed result=======

$ diff BTreeIndex.cc BTreeIndexc.cc 
11a12
> #define DEBUG 0
26a28,31
> /*
>  * BTreeIndex helper function, inserts a key into Btree
>  * using <key = 100i, recordID = [pid = i, sid = i]>
>  */
57d61
<         // if (DEBUG) printf("BTreeIndex::open() - endPid for pf is %d\n", indexEndPid);
65d68
<             // if (DEBUG) printf("BTreeIndex::open() - empty pagefile, written back the rootPid = %d and treeHeight = %d\n", rootPid, treeHeight);
71d73
<             // ret = pf.read(indexEndPid - 1, buffer); // should read the first page
74d75
<             // if (DEBUG) printf("BTreeIndex::open() - pagefile not empty, we read it into buffer\n");
86,88c87
<             // if (DEBUG) printf("BTreeIndex::open() - pagefile not empty, got rootPid = %d, treeheight = %d\n", rootPid, treeHeight);
<             // rootPid = rootPid >= 0 ? rootPid : -1;
<             // treeHeight = treeHeight > 0 ? treeHeight : 0;
---
>             
116d114
<     if (DEBUG) printf("BTreeIndex::close() - written back the rootPid and treeHeight\n");
129d126
<     if (DEBUG) printf("BTreeIndex::close() - pagefile closed\n");
136c133
<     int insertAtLevel = 1;
---
>     // int insertAtLevel = 1;
141,142c138
<     if (DEBUG) printf("BTreeIndex::insertInParent() - insert siblingPid = %d\n", siblingPid);
< 
---
>     
146c142,147
<     if (DEBUG) printf("BTreeIndex::insertInParent() - currentPid = %d\n", currentPid);
---
>     
>     // get pid of the parent node of the current node
>     PageId parentPid = path.back(); 
>     path.pop_back();
>     
>     if (parentPid > 0 && parentPid != rootPid) { // current node is not a root node, it has a parent
148,162c149,158
<     if (currentPid == rootPid) { // if current node is already the root node
<         if (DEBUG) printf("BTreeIndex::insertInParent() - current node is already the root node\n");
<         bool isFull = false;
<         if (treeHeight == 1) {
<             // // current node is a leaf node, so we want to create a
<             // // new root node (a nonleaf node) and initialize it
<             // isFull = true;
<             // BTLeafNode newSiblingNode;
<             // PageId newSiblingPid = pf.endPid();
<             // int newSiblingKey;
<                 
<             BTNonLeafNode newRootNode;
<             newRootNode.initializeRoot(currentPid, siblingKey, siblingPid);
<             PageId newRootPid = pf.endPid();
<             ret = newRootNode.write(newRootPid, pf);
---
>         // else, recursively insert into current node's parent
>         BTNonLeafNode parentNode;
>         ret = parentNode.read(parentPid, pf);
>         if (ret != 0) {
>             return ret; // RC_FILE_READ_FAILED;
>         }
>         
>         if (parentNode.getKeyCount() < N_KEY) { // if there is space in the parent node
>             parentNode.insert(siblingKey, siblingPid);
>             ret = parentNode.write(parentPid, pf);
165,168c161,165
<             }
<             rootPid = newRootPid;
<             treeHeight++;
<             insertAtLevel++;
---
>             }    
>         } else { // no space in the parent node -- split
>             PageId newSiblingPid = pf.endPid();
>             BTNonLeafNode newSiblingNode;
>             int newSiblingKey;
170,186c167,172
<             if (DEBUG) printf("BTreeIndex::insertInParent() - current leaf root node is a leaf node, create a new root node now\n");
<             return ret;
<         } else {
<             BTNonLeafNode currentNode;  // otherwise, current root node must be a nonleaf node
<             currentNode.read(currentPid, pf);
<             if (currentNode.getKeyCount() >= N_KEY) {
<                 isFull = true;
<                 if (DEBUG) printf("BTreeIndex::insertInParent() - current key # is %d\n", currentNode.getKeyCount());
<                 if (DEBUG) printf("BTreeIndex::insertInParent() - current nonleaf root node is full, create a new root node now\n");
<             } else {
<                 if (DEBUG) printf("BTreeIndex::insertInParent() - current key # is %d\n", currentNode.getKeyCount());
<                 if (DEBUG) printf("BTreeIndex::insertInParent() - current nonleaf root node is NOT full, insert safely\n");
<                 currentNode.insert(siblingKey, siblingPid);
<                 ret = currentNode.write(currentPid, pf);
<                 if (ret != 0) {
<                     return ret; // RC_FILE_WRITE_FAILED;
<                 }
---
>             // no space in the parent node
>             parentNode.insertAndSplit(siblingKey, siblingPid, newSiblingNode, newSiblingKey);
>             
>             ret = newSiblingNode.write(newSiblingPid, pf);
>             if (ret != 0) {
>                 return ret; // RC_FILE_WRITE_FAILED;
187a174,191
>             ret = parentNode.write(parentPid, pf);
>             if (ret != 0) {
>                 return ret; // RC_FILE_WRITE_FAILED;
>             }
> 
>             // push currentNode pid in the vector
>             path.push_back(parentPid);
>             // push new sibling node pid in the vector
>             path.push_back(newSiblingPid);
>             ret = insertInParent(path, newSiblingKey);
>         }
>     } else if (parentPid > 0 && parentPid == rootPid) {
>         // else, insert into current node's parent, which is a root node
>         
>         BTNonLeafNode parentNode;
>         ret = parentNode.read(parentPid, pf);
>         if (ret != 0) {
>             return ret; // RC_FILE_READ_FAILED;
188a193,215
>         
>         if (parentNode.getKeyCount() < N_KEY) { // if there is space in the parent node
>             parentNode.insert(siblingKey, siblingPid);
>             ret = parentNode.write(parentPid, pf);
>             if (ret != 0) {
>                 return ret; // RC_FILE_WRITE_FAILED;
>             }
>         } else { // no space in the parent node -- split
>             PageId newSiblingPid = pf.endPid();
>             BTNonLeafNode newSiblingNode;
>             int newSiblingKey;
> 
>             // no space in the parent node
>             parentNode.insertAndSplit(siblingKey, siblingPid, newSiblingNode, newSiblingKey);
> 
>             ret = newSiblingNode.write(newSiblingPid, pf);
>             if (ret != 0) {
>                 return ret; // RC_FILE_WRITE_FAILED;
>             }
>             ret = parentNode.write(parentPid, pf);
>             if (ret != 0) {
>                 return ret; // RC_FILE_WRITE_FAILED;
>             }
190,193d216
<         if (isFull) {
<             if (DEBUG) printf("BTreeIndex::insertInParent() - isFull: current root node is full, create a new root\n");
<             BTNonLeafNode rootNode;
<             rootNode.initializeRoot(currentPid, siblingKey, siblingPid);
195,196c218,219
<             
<             insertAtLevel++;
---
>             BTNonLeafNode rootNode;
>             rootNode.initializeRoot(parentPid, newSiblingKey, newSiblingPid);
203,205d225
<             if (DEBUG) printf("BTreeIndex::insertInParent() - the new root node is:\n");
<             rootNode.printKeys();
< 
209,238d228
<             if (DEBUG) printf("BTreeIndex::insertInParent() - the new rootPid = %d, treeHeight = %d:\n", newRootPid, treeHeight);
< 
<             return ret;
<         }
< 
<         return ret;
<     }
< 
<     // else, insert into current node's parent
<     if (DEBUG) printf("BTreeIndex::insert() - else, insert into current node's parent\n");
<     // get pid of the parent node of the current node
<     PageId parentPid = path.back(); 
<     path.pop_back();
<     if (DEBUG) printf("BTreeIndex::insertInParent() - parentPid = %d\n", parentPid);
< 
<     BTNonLeafNode parentNode;
<     ret = parentNode.read(parentPid, pf);
<     if (ret != 0) {
<         return ret; // RC_FILE_READ_FAILED;
<     }
< 
<     if (DEBUG) printf("BTreeIndex::insertInParent() - the parent node is:\n");
<     parentNode.printKeys();
< 
<     if (parentNode.getKeyCount() < N_KEY) { // if there is space in the parent node
<         if (DEBUG) printf("BTreeIndex::insertInParent() - current parent has %d keys\n", parentNode.getKeyCount());
<         parentNode.insert(siblingKey, siblingPid);
<         ret = parentNode.write(parentPid, pf);
<         if (ret != 0) {
<             return ret; // RC_FILE_WRITE_FAILED;
240,257d229
<         if (DEBUG) printf("BTreeIndex::insertInParent() - not full, after insert, the parent node is:\n");
<         if (DEBUG) printf("BTreeIndex::insertInParent() - current parent has %d keys\n", parentNode.getKeyCount());
<         parentNode.printKeys();
<     } else { // no space in the parent node -- split
<         PageId newSiblingPid = pf.endPid();
<         BTNonLeafNode newSiblingNode;
<         int newSiblingKey;
< 
<         insertAtLevel++;
<         if (DEBUG) printf("BTreeIndex::insertInParent() - no space, should split - current parent has %d keys\n", parentNode.getKeyCount());
< 
<         if (DEBUG) printf("BTreeIndex::insertInParent() - in the trouble, the siblingKey = %d\n", siblingKey);
<         if (DEBUG) printf("BTreeIndex::insertInParent() - in the trouble, the newSiblingPid = %d\n", newSiblingPid);
<         if (DEBUG) printf("BTreeIndex::insertInParent() - in the trouble, the currentPid = %d\n", parentPid);
< 
<         // no space in the parent node
<         parentNode.insertAndSplit(siblingKey, siblingPid, newSiblingNode, newSiblingKey);
<         if (DEBUG) printf("BTreeIndex::insertInParent() - executed insertAndSplit\n");
259,266c231,234
<         ret = newSiblingNode.write(newSiblingPid, pf);
<         if (ret != 0) {
<             return ret; // RC_FILE_WRITE_FAILED;
<         }
<         ret = parentNode.write(parentPid, pf);
<         if (ret != 0) {
<             return ret; // RC_FILE_WRITE_FAILED;
<         }
---
>     } else if (currentPid == rootPid) { // if current node is already the root node
>         
>         BTNonLeafNode currentNode;  // current root node must be a nonleaf node now
>         currentNode.read(currentPid, pf);
268,279c236,241
<         if (DEBUG) printf("BTreeIndex::insertInParent() - node full, after insert, the parent node is:\n");
<         parentNode.printKeys();
<         if (DEBUG) printf("BTreeIndex::insertInParent() - node full, after insert, the new sibling node of the parent is:\n");
<         newSiblingNode.printKeys();
< 
<         if (treeHeight <= insertAtLevel) {
<             if (DEBUG) printf("BTreeIndex::insertInParent() - hey! you increased the level\n");
<             // get pid of the parent node of the current node
<             BTNonLeafNode newGrandRootNode;
<             newGrandRootNode.initializeRoot(parentPid, newSiblingKey, newSiblingPid);
<             PageId newGrandRootPid = pf.endPid();
<             ret = newGrandRootNode.write(newGrandRootPid, pf);
---
>         if (currentNode.getKeyCount() >= N_KEY) {
>             PageId newRootPid = pf.endPid();
>             BTNonLeafNode rootNode;
>             rootNode.initializeRoot(currentPid, siblingKey, siblingPid);
>             
>             ret = rootNode.write(newRootPid, pf);
283,294d244
<             // push newGrandRootNode pid in the vector
<             path.push_back(newGrandRootPid);
<             // push currentNode pid in the vector
<             path.push_back(parentPid);
<             // push new sibling node pid in the vector
<             path.push_back(newSiblingPid);
<             if (DEBUG) printf("BTreeIndex::insertInParent() - pushed grandRootPid, parentPid and newSiblingPid into the path\n");
<             if (DEBUG) printf("BTreeIndex::insertInParent() - grandParentPid = %d\n", newGrandRootPid);
< 
< 
<         if (DEBUG) printf("BTreeIndex::insertInParent() - newGrandRootNode is:\n");
<         newGrandRootNode.printKeys();
297c247
<             rootPid = newGrandRootPid;
---
>             rootPid = newRootPid;
299,301d248
<             if (DEBUG) printf("\n~~~~~~~BTreeIndex::insertInParent() - NOW treeHeight is %d\n", treeHeight);
<             if (DEBUG) printf("BTreeIndex::insertInParent() - the new rootPid = %d, treeHeight = %d:\n", newGrandRootPid, treeHeight);
<             return ret;
303,308c250,254
<             // push currentNode pid in the vector
<             path.push_back(parentPid);
<             // push new sibling node pid in the vector
<             path.push_back(newSiblingPid);
<             if (DEBUG) printf("BTreeIndex::insertInParent() - pushed parentPid and newSiblingPid into the path\n");
<             ret = insertInParent(path, newSiblingKey);
---
>             currentNode.insert(siblingKey, siblingPid);
>             ret = currentNode.write(currentPid, pf);
>             if (ret != 0) {
>                 return ret; // RC_FILE_WRITE_FAILED;
>             }
309a256,257
> 
>         return ret;
326,327c274
<     if (DEBUG) printf("BTreeIndex::insert() - path initialized\n");
< 
---
>     
331d277
<         if (DEBUG) printf("BTreeIndex::insert() - empty tree\n");
334d279
<         if (DEBUG) printf("BTreeIndex::insert() - insert into root node\n");
340d284
<         if (DEBUG) printf("BTreeIndex::insert() - pf.endPid() = %d\n", rootPid);
350,353d293
<         if (DEBUG) printf("BTreeIndex::insert() - root node written back to pf where rootPid = %d\n", rootPid);
< 
<         if (DEBUG) printf("BTreeIndex::insert() - and now the root node is:\n");
<         root.printKeys();
361d300
<     if (DEBUG) printf("BTreeIndex::insert() - located target pid = %d\n", targetPid);
363,364d301
<     if (DEBUG) printf("BTreeIndex::insert() - target leaf node just created (should be empty):\n");
<     targetLeafNode.printKeys();
366,368c303
<     if (DEBUG) printf("BTreeIndex::insert() - target leaf node read:\n");
<     targetLeafNode.printKeys();
< 
---
>     
372d306
<         if (DEBUG) printf("BTreeIndex::insert() - targetLeafNode is not full, insert\n");
374,375d307
<         if (DEBUG) printf("BTreeIndex::insert() - now after insert, the target leaf node is:\n");
<         targetLeafNode.printKeys();
385,386c317
<         if (DEBUG) printf("BTreeIndex::insert() - no space, sibling pid = %d and it is empty now\n", siblingPid);
<     
---
>         
392,393d322
<         if (DEBUG) printf("BTreeIndex::insert() - pushed targetPid and siblingPid into the path\n");
< 
397,401d325
<         if (DEBUG) printf("BTreeIndex::insert() - after split, target leaf node is:\n");
<         targetLeafNode.printKeys();
<         if (DEBUG) printf("BTreeIndex::insert() - after split, sibling leaf node is:\n");
<         siblingLeafNode.printKeys();
< 
405d328
<         if (DEBUG) printf("BTreeIndex::insert() - now insert and split, get siblingKey = %d\n", siblingKey);
415,417c338,354
<         if (DEBUG) printf("BTreeIndex::insert() - after split, next ptr of target leafnode is %d\n", targetLeafNode.getNextNodePtr());
<         if (DEBUG) printf("BTreeIndex::insert() - now insert siblingKey = %d into its parent\n", siblingKey);
<         ret = insertInParent(path, siblingKey);
---
>         if (treeHeight == 1) { // if current leafnode is also the root node, we need to create a new root node, and increment the tree height
>             PageId newRootPid = pf.endPid();
>             BTNonLeafNode newRootNode;
>             newRootNode.initializeRoot(targetPid, siblingKey, siblingPid);
> 
>             // push new root node pid?
>             // path.push_back(rootNewPid);
> 
>             ret = newRootNode.write(newRootPid, pf);
>             if (ret != 0) {
>                 return ret; // RC_FILE_WRITE_FAILED;
>             }
>             rootPid = newRootPid;
>             treeHeight++;
>         } else { // current leafnode is not the root node, we need to insert into its parent
>             ret = insertInParent(path, siblingKey);
>         }
446d382
<     if (DEBUG) printf("BTreeIndex::locate() - path initialized\n");
452,458d387
<     if (DEBUG) printf("BTreeIndex::locate() - treeHeight = %d\n", treeHeight);
<     // this one can be wrong if for the second index file, pid > 0!!
<     // assert(rootPid > 0);
<     
<     // BTNonLeafNode
<     // BTLeafNode
<     // !!!### PROBLEM?
465,466d393
<         if (DEBUG) printf("BTreeIndex::locate() - current level = %d, non-leaf node read:\n", currentLevel);
<         currentNonLeafNode.printKeys();
469d395
<             if (DEBUG) printf("BTreeIndex::locate() - we are tracking, current pid = %d\n", currentPid);
472d397
<         if (DEBUG) printf("BTreeIndex::locate() - located child ptr pid = %d\n", currentPid);
481,482d405
<     if (DEBUG) printf("BTreeIndex::locate() - reached leaf level, leaf pid = %d, and it is:\n", currentPid);
<     currentNode.printKeys();
489d411
<     if (DEBUG) printf("BTreeIndex::locate() - we are tracking, leaf eid = %d\n", cursor.eid);
511,512c433
<     if (DEBUG) printf("BTreeIndex::readForward() - current pid = %d, eid = %d\n", currentPid, currentEid);
< 
---
>     
523d443
<     if (DEBUG) printf("BTreeIndex::readForward() - the entry read at current node: key = %d, rid.pid = %d, rid.sid = %d\n", key, rid.pid, rid.sid);
529,530d448
<         if (DEBUG) printf("BTreeIndex::readForward() - getKeyCount() = %d, eid points to next node and now cursor.pid = %d, cursor.eid = %d\n", currentNode.getKeyCount(), cursor.pid, cursor.eid);
< 
534d451
<         if (DEBUG) printf("BTreeIndex::readForward() - no overflow issue, now cursor.pid = %d, cursor.eid = %d\n", cursor.pid, cursor.eid);
539a457,460
> /*
>  * BTreeIndex helper function, prints out BTree info
>  * rootPid and treeHeight
>  */
s-164-67-233-222:submission Dale$ 


$ diff BTreeNode.cc BTreeNodec.cc 
74c74
< 	int i=0;
---
> 	int i = 0;
132c132
< 	int N = N_PTR - 1;
---
> 	// int N = N_PTR - 1;
134c134
< 	int mid_key = N / 2;
---
> 	int mid_key = N_KEY / 2;
141c141
< 	int num_copy = N - mid_key;
---
> 	int num_copy = N_KEY - mid_key;
144c144
< 	if (pos>mid_key) {
---
> 	if (pos > mid_key) {
149c149
< 	char *sib_start = buffer + P_SIZE - PID_SIZE - (num_copy * L_OFFSET);
---
> 	char *sib_start = buffer + ((N_KEY - num_copy) * L_OFFSET);
154c154
< 	if (pos>mid_key) {
---
> 	if (pos > mid_key) {
183c183
< 	int i=0;
---
> 	int i = 0;
218,219c218,219
< 	char *entryStart;
< 	entryStart = buffer + (eid * L_OFFSET);
---
> 	char *entryStart = buffer + (eid * L_OFFSET);
> 	char *end = buffer + P_SIZE;
220a221,222
> 	if (buffer > end)
> 		return RC_INVALID_CURSOR;
238c240
< 	return *((PageId *) (buffer + P_SIZE - PID_SIZE));
---
> 	return *((PageId *) (buffer + L_OFFSET * N_KEY));
251c253
< 	*((PageId *) (buffer + P_SIZE - PID_SIZE)) = pid;
---
> 	*((PageId *) (buffer + L_OFFSET * N_KEY)) = pid;
311,312c313
< 	// char *end = buffer+P_SIZE-PID_SIZE;
< 	char *end = buffer + (N_KEY * NL_OFFSET);
---
> 	char *end = buffer + (N_KEY * NL_OFFSET) + PID_SIZE;
316c317
< 	while(kstart <= end) {
---
> 	while (kstart <= end) {
329c330
< 	return i;
---
> 	return (i > N_KEY) ? (i - 1) : i;
342c343,345
< 	BTNonLeafNode::locate(key,pos);
---
> 	BTNonLeafNode::locate(key, pos);
> 	// printf("BTNonLeafNode::insert() - located pos = %d\n", pos);
> 	// printf("BTNonLeafNode::insert() - CHECKPOINT getKeyCount = %d keys\n", getKeyCount());
345c348
< 	char *loc = buffer + pos * NL_OFFSET;
---
> 	char *loc = buffer + PID_SIZE + pos * NL_OFFSET;
352,354d354
< 	memcpy(loc, &pid, PID_SIZE);
< 	// printf("copy <key = %d> in inserted pair\n", key);
< 	loc += PID_SIZE;
355a356,357
> 	loc += K_SIZE;
> 	memcpy(loc, &pid, PID_SIZE);
372,378c374,378
< 	// mid_key is the position to split
< 	int mid_key = N_KEY / 2;
< 
< 	int pos;
< 	locate(key, pos);
< 	
< 	// pointer to start of right half
---
> 	insert(key, pid);
> 	int mid_key = (N_KEY + 1) / 2;	// mid_key is the position to split
> 	char *loc = buffer + PID_SIZE + (mid_key * NL_OFFSET);
> 	memcpy(&midKey, loc, K_SIZE);
> 	char *sib_start = loc + K_SIZE;
379a380,381
> 	sibling.initBuffer(sib_start, ((num_copy * NL_OFFSET) + PID_SIZE));
> 	memset(loc, NONE, ((num_copy + 1) * NL_OFFSET));
381,399d382
< 	if (pos > mid_key) {
< 		num_copy--;
< 	}
< 
< 	// TODO: May have bug regarding keep the last pointer pid!!
< 	char *sib_start = buffer + ((N_KEY - num_copy) * NL_OFFSET);
< 	sibling.initBuffer(sib_start, num_copy * NL_OFFSET);
< 	memset(sib_start, NONE, num_copy * NL_OFFSET);
< 
< 	if (pos > mid_key) {
< 		// insert in sibling
< 		sibling.insert(key, pid);
< 	} else {
< 		// insert in current node
< 		insert(key, pid);
< 	}
< 	
< 	PageId siblingPid;
< 	sibling.readEntry(0, midKey, siblingPid);